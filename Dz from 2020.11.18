type 'a tree = Leaf | Node of ('a tree) * ('a tree) * 'a;;

let rec mem tri x=
match tri with
Node (tr1,tr2,n) -> if x < n then (mem tr1 x) else (if x = n then true else (mem tr2 x))
|Leaf -> false;; 

print_string"is there 3 in tree N (L,N (L,L,3),1)? (N = Node, L = Leaf )\n";;

if (mem (Node (Leaf,Node (Leaf,Leaf,3),1)) 3) then (print_string"YES \n\n") else (print_string"NO \n\n");;

let rec string_of_tree tri =
match tri with
Leaf -> "L"
|Node (tr1,tr2,a) -> ("N ("^(string_of_tree tr1)^","^(string_of_tree tr2)^","^(string_of_int a)^")");;

let rec add tri x=
match tri with
Node (tr1,tr2,n) -> if x < n then (Node (add tr1 x,tr2, n)) else (if x = n then tri else (Node (tr1,add tr2 x, n)))
| Leaf->(Node (Leaf, Leaf, x));;

print_string"add (N (L,N (L,L,3),1)) 2 is (print this tree with string_of_tree)\n";;
print_string(string_of_tree (add (Node (Leaf,Node (Leaf,Leaf,3),1)) 2));;
print_string"\n\n";;

let rec size tri=
match tri with
Node (tr1,tr2,x) -> (1 + (size tr1) + (size tr2))
|Leaf -> 0;;

let rec delete tri x=  
let rec find_min tr=
match tr with
Leaf->failwith""
|Node (Node(tr11,tr12,m),tr2,n) -> find_min (Node(tr11,tr12,m))
|Node (Leaf,tr2,n) -> n in                                                
match tri with
Node (tr1,tr2,n) -> if x = n then (if tr2 = Leaf then tr1 else (let y = (find_min tr2) in (Node (tr1,(delete tr2 y), y)))) 
else (if x < n then (Node (delete tr1 x, tr2, n)) else (Node (tr1, delete tr2 x, n))) 
|Leaf -> failwith"";;

print_string"delete (N (N (L,L,0),N (N (L,L,2),(N (L,L,4)),3),1)) 3 is \n";;
print_string(string_of_tree (delete (Node (Node (Leaf,Leaf,0),Node (Node (Leaf,Leaf,2),(Node (Leaf,Leaf,4)),3),1)) 3));;
print_string"\n\n";;

let rec size tri=
match tri with
Node (tr1,tr2,x) -> (1 + (size tr1) + (size tr2))
|Leaf -> 0;;

let rec verity tri=
let rec sup_f tr =
match tr with
Node (Leaf,Leaf, a) -> (a,a,true)
|Node (Leaf,tr2, a) -> let (m1,m2,p) = sup_f tr2 in (a,m2,(a <= m1) && p)
|Node (tr1,Leaf, a) -> let (m1,m2,p) = sup_f tr1 in (m1,a,(m2 <= a) && p)
|Node (tr1, tr2, a) -> let (min1,max1,p1) = sup_f tr1 in
                       let (min2,max2,p2) = sup_f tr2 in
                       (min1,max2,((max1 <= a) && (a <= min2) && p1 && p2)) 
|Leaf -> (0,0,true) in

let (_,_,p) = sup_f tri in p;;




print_string"verity N (N (L,N (L,L,2),3),N (L,L,5),4) is \n";;
if (verity (Node (Node (Leaf,Node (Leaf,Leaf,2),3),Node (Leaf,Leaf,5),4))) then (print_string"YES \n\n") else (print_string"NO \n\n");;





