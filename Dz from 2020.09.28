let abc = [('a',[1;3]);('b',[3;1;1;1]);('c',[3;1;3;1]);('d',[3;1;1]);('e',[1]);('f',[1;1;3;1]);('g',[3;3;1]);('h',[1;1;1;1]);('i',[1;1]);
('j',[1;3;3;3]);('k',[3;1;3]);('l',[1;3;1;1]);('m',[3;3]);('n',[3;1]);('o',[3;3;3]);('p',[1;3;3;1]);('q',[3;3;1;3]);('r',[1;3;1]);
('s',[1;1;1]);('t',[3]);('u',[1;1;3]);('v',[1;1;1;3]);('w',[1;3;3]);('x',[3;1;1;3]);('y',[3;1;3;3]);('z',[3;3;1])];;

let rec glue f l e=
match l with
a::b::c->(glue f ((f a b)::c) e)
|a::b->a
|[]->e;;

let from_Morth s=
(*
let rec sup_f i n1 n2 p l w= if i = String.length s then (if n1 = 0 then (if p = [] then (if l = [] then (if w = [] then [] 
                                                                                                                    else [w]) 
                                                                                                    else (sup_f i 0 0 [] (w @ [l]))) 
                                                                                    else (sup_f i 0 0 [] (l @ [p]) w)) 
                                                                    else (sup_f i 0 0 p (l @ [n1]) w)) 
                                                    else (if s.[i] = '*' then (if n1 = 0 then (match n3 with 
                                                                                                   1 ->(sup_f (i+1) 1 0 [] (l@[p]) w) 
                                                                                                  |3 -> (sup_f (i+1) 1 0 [] [] (w @ [l @ [p]])) 
                                                                                                  | 9 -> (sup_f )) 
                                                                                         else ())
                                                                         else ())

*)
let rec sup_f i n1 n2 l w= if i = String.length s then (if n1 = 0 then (if l = [] then (if w = [] then [] 
                                                                                                  else [w]) 
                                                                                  else (sup_f i 0 0 [] (w @ [l]))) 
                                                                  else (sup_f i 0 0 (l @ [n1]) w)) 
                                                  else (if s.[i] = '*' then (if n1 = 0 then (match n2 with 
                                                                                                 1 ->(sup_f (i+1) 1 0 l w) 
                                                                                                |3 -> (sup_f (i+1) 1 0 [] (w @ [l])) 
                                                                                                |9 -> ((w @ (if l = [] then [] else [l]))::(sup_f (i+1) 1 0 [] []))) 
                                                                                       else (sup_f (i+1) (n1+1) 0 l w))
                                                                       else (if n2 = 0 then (sup_f (i+1) 0 1 (l @ [n1]) w)
                                                                                       else (sup_f (i+1) 0 (n2+1) l w))) in
let rec find_letter l l1=
match l1 with
(a,l2)::l3-> if l = l2 then (String.make 1 a) else (find_letter l l3)
|[]->((List.iter (fun x -> print_int x;print_string " ") l);failwith"???") in


let str = (glue (fun x y-> (x ^ " " ^ y)) (List.map (fun x-> (glue (fun a b -> (a^b)) (List.map (fun y -> (find_letter y abc)) x) "")) (sup_f 0 0 9 [] [])) "") in

String.sub str 1 ((String.length str) - 1);;

print_string "line \"* * *   *** *** ***   * * *         * * *   *** *** ***   * * *\" to string is:\n";;
print_string (from_Morth "* * *   *** *** ***   * * *         * * *   *** *** ***   * * *");;

let to_Morth s =

let rec help_fun l=
match l with
n1::n2::b->((String.make n1 '*')^" "^(help_fun (n2::b)))
|n1::[]-> (String.make n1 '*')
|[]->"" in


let rec find_letter c l1=
match l1 with
(a,l2)::l3-> if c = a then (help_fun l2) else (find_letter c l3)
|[]->if c = ' ' then "   "  else (failwith"???") in

let rec sup_f i = if i = String.length s then "" else ((find_letter (s.[i]) abc)^(if i = ((String.length s) - 1) then "" else "   ")^(sup_f (i+1))) in
(sup_f 0);;


print_string"\n\nstring \"sos sos\" to Morth is:\n";;

print_string(to_Morth "sos sos");;

let string_to_int s =
let rec sup_f i = if i = -1 then 0 else ((sup_f (i-1))*256 + (int_of_char (s.[i]))) in (sup_f ((String.length s)-1));;

print_string"\n\n\"sos\" to int is:\n";;
print_int(string_to_int "sos");;





